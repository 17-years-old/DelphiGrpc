// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_service.proto

/*
Package testservice is a generated protocol buffer package.

It is generated from these files:
	test_service.proto

It has these top-level messages:
	Time
*/
package testservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Time struct {
	Sec int32  `protobuf:"varint,1,opt,name=sec" json:"sec,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Time) GetSec() int32 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func (m *Time) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Time)(nil), "testservice.Time")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	Sleep(ctx context.Context, in *Time, opts ...grpc.CallOption) (*Time, error)
	CountDown(ctx context.Context, in *Time, opts ...grpc.CallOption) (TestService_CountDownClient, error)
	CalcSum(ctx context.Context, opts ...grpc.CallOption) (TestService_CalcSumClient, error)
	UpdateableCountDown(ctx context.Context, opts ...grpc.CallOption) (TestService_UpdateableCountDownClient, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Sleep(ctx context.Context, in *Time, opts ...grpc.CallOption) (*Time, error) {
	out := new(Time)
	err := grpc.Invoke(ctx, "/testservice.TestService/Sleep", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) CountDown(ctx context.Context, in *Time, opts ...grpc.CallOption) (TestService_CountDownClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestService_serviceDesc.Streams[0], c.cc, "/testservice.TestService/CountDown", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceCountDownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_CountDownClient interface {
	Recv() (*Time, error)
	grpc.ClientStream
}

type testServiceCountDownClient struct {
	grpc.ClientStream
}

func (x *testServiceCountDownClient) Recv() (*Time, error) {
	m := new(Time)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) CalcSum(ctx context.Context, opts ...grpc.CallOption) (TestService_CalcSumClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestService_serviceDesc.Streams[1], c.cc, "/testservice.TestService/CalcSum", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceCalcSumClient{stream}
	return x, nil
}

type TestService_CalcSumClient interface {
	Send(*Time) error
	CloseAndRecv() (*Time, error)
	grpc.ClientStream
}

type testServiceCalcSumClient struct {
	grpc.ClientStream
}

func (x *testServiceCalcSumClient) Send(m *Time) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceCalcSumClient) CloseAndRecv() (*Time, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Time)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) UpdateableCountDown(ctx context.Context, opts ...grpc.CallOption) (TestService_UpdateableCountDownClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestService_serviceDesc.Streams[2], c.cc, "/testservice.TestService/UpdateableCountDown", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceUpdateableCountDownClient{stream}
	return x, nil
}

type TestService_UpdateableCountDownClient interface {
	Send(*Time) error
	Recv() (*Time, error)
	grpc.ClientStream
}

type testServiceUpdateableCountDownClient struct {
	grpc.ClientStream
}

func (x *testServiceUpdateableCountDownClient) Send(m *Time) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceUpdateableCountDownClient) Recv() (*Time, error) {
	m := new(Time)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TestService service

type TestServiceServer interface {
	Sleep(context.Context, *Time) (*Time, error)
	CountDown(*Time, TestService_CountDownServer) error
	CalcSum(TestService_CalcSumServer) error
	UpdateableCountDown(TestService_UpdateableCountDownServer) error
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Time)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testservice.TestService/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Sleep(ctx, req.(*Time))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_CountDown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Time)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).CountDown(m, &testServiceCountDownServer{stream})
}

type TestService_CountDownServer interface {
	Send(*Time) error
	grpc.ServerStream
}

type testServiceCountDownServer struct {
	grpc.ServerStream
}

func (x *testServiceCountDownServer) Send(m *Time) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_CalcSum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).CalcSum(&testServiceCalcSumServer{stream})
}

type TestService_CalcSumServer interface {
	SendAndClose(*Time) error
	Recv() (*Time, error)
	grpc.ServerStream
}

type testServiceCalcSumServer struct {
	grpc.ServerStream
}

func (x *testServiceCalcSumServer) SendAndClose(m *Time) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceCalcSumServer) Recv() (*Time, error) {
	m := new(Time)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_UpdateableCountDown_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).UpdateableCountDown(&testServiceUpdateableCountDownServer{stream})
}

type TestService_UpdateableCountDownServer interface {
	Send(*Time) error
	Recv() (*Time, error)
	grpc.ServerStream
}

type testServiceUpdateableCountDownServer struct {
	grpc.ServerStream
}

func (x *testServiceUpdateableCountDownServer) Send(m *Time) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceUpdateableCountDownServer) Recv() (*Time, error) {
	m := new(Time)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testservice.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sleep",
			Handler:    _TestService_Sleep_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CountDown",
			Handler:       _TestService_CountDown_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CalcSum",
			Handler:       _TestService_CalcSum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateableCountDown",
			Handler:       _TestService_UpdateableCountDown_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test_service.proto",
}

func init() { proto.RegisterFile("test_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x49, 0x2d, 0x2e,
	0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x06, 0x89, 0x41, 0x85, 0x94, 0xb4, 0xb8, 0x58, 0x42, 0x32, 0x73, 0x53, 0x85, 0x04, 0xb8, 0x98,
	0x8b, 0x53, 0x93, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x40, 0x4c, 0x90, 0x48, 0x6e, 0x71,
	0xba, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0x69, 0xf4, 0x96, 0x91, 0x8b, 0x3b, 0x24,
	0xb5, 0xb8, 0x24, 0x18, 0xa2, 0x57, 0x48, 0x9f, 0x8b, 0x35, 0x38, 0x27, 0x35, 0xb5, 0x40, 0x48,
	0x50, 0x0f, 0xc9, 0x48, 0x3d, 0x90, 0x79, 0x52, 0x98, 0x42, 0x4a, 0x0c, 0x42, 0xa6, 0x5c, 0x9c,
	0xce, 0xf9, 0xa5, 0x79, 0x25, 0x2e, 0xf9, 0xe5, 0x79, 0xc4, 0x6a, 0x32, 0x60, 0x14, 0x32, 0xe6,
	0x62, 0x77, 0x4e, 0xcc, 0x49, 0x0e, 0x2e, 0xcd, 0x25, 0x56, 0x93, 0x06, 0xa3, 0x90, 0x23, 0x97,
	0x70, 0x68, 0x41, 0x4a, 0x62, 0x49, 0x6a, 0x62, 0x52, 0x4e, 0x2a, 0xc9, 0xb6, 0x6a, 0x30, 0x1a,
	0x30, 0x26, 0xb1, 0x81, 0xc3, 0xcb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x54, 0xd1, 0x9e, 0xd9,
	0x45, 0x01, 0x00, 0x00,
}
